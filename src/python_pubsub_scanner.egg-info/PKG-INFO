Metadata-Version: 2.4
Name: python_pubsub_scanner
Version: 0.1.0
Summary: Autonomous scanner for event-driven architectures - scans codebase and pushes event flow graphs to API
Author-email: venantvr <venantvr@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/venantvr-trading/Python.PubSub.Scanner
Project-URL: Documentation, https://github.com/venantvr-trading/Python.PubSub.Scanner/wiki
Project-URL: Repository, https://github.com/venantvr-trading/Python.PubSub.Scanner
Project-URL: Issues, https://github.com/venantvr-trading/Python.PubSub.Scanner/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.28.0
Requires-Dist: pyyaml
Provides-Extra: dev
Requires-Dist: setuptools>=65.0; extra == "dev"
Requires-Dist: wheel; extra == "dev"
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: flake8>=6.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Requires-Dist: black>=23.0; extra == "dev"
Requires-Dist: graphviz>=0.20; extra == "dev"

# Python PubSub Scanner

**Autonomous scanner for event-driven architectures** - Scans your codebase for event flow patterns and pushes graph data to a monitoring API.

## Features

- **Autonomous scanning** of agent files to detect event subscriptions and publications
- **Multiple graph types**: simplified, complete, and full-tree visualizations
- **API integration**: automatically pushes graph data and statistics to event_flow API
- **One-shot or continuous modes**: run once or scan periodically
- **Namespace detection**: automatically discovers event namespaces
- **Comprehensive statistics**: tracks events, agents, and connections

## Installation

### From PyPI (when published)

```bash
pip install python_pubsub_scanner
```

### From source

```bash
git clone https://github.com/venantvr-trading/Python.PubSub.Scanner
cd Python.PubSub.Scanner
pip install -e .
```

### With development dependencies

```bash
pip install -e ".[dev]"
```

## Quick Start

### 1. Start the Event Flow API

First, ensure the event_flow API server is running:

```bash
# In your DevTools project
pubsub-tools event-flow
```

### 2. Run the Scanner

**One-shot scan:**

```bash
pubsub-scanner \
    --agents-dir /path/to/your/agents \
    --events-dir /path/to/your/events \
    --api-url http://localhost:5555 \
    --one-shot
```

**Continuous scan (every 60 seconds):**

```bash
pubsub-scanner \
    --agents-dir /path/to/your/agents \
    --events-dir /path/to/your/events \
    --interval 60
```

### 3. View Results

Open your browser to `http://localhost:5555` to see the visualizations.

## Integration with Makefile

Add scanner commands to your application's Makefile:

```makefile
# Makefile in your application root

.PHONY: scan-events scan-events-watch

# Scanner configuration
SCANNER_API_URL := http://localhost:5555
AGENTS_DIR := ./python_pubsub_risk/agents
EVENTS_DIR := ./python_pubsub_risk/events

# One-shot scan
scan-events:
	@echo "Scanning event flow..."
	@pubsub-scanner \
		--agents-dir $(AGENTS_DIR) \
		--events-dir $(EVENTS_DIR) \
		--api-url $(SCANNER_API_URL) \
		--one-shot
	@echo "✅ Scan complete! View at $(SCANNER_API_URL)"

# Continuous scan
scan-events-watch:
	@echo "Starting continuous event flow scanner..."
	@pubsub-scanner \
		--agents-dir $(AGENTS_DIR) \
		--events-dir $(EVENTS_DIR) \
		--api-url $(SCANNER_API_URL) \
		--interval 60
```

Then run:

```bash
# One-shot
make scan-events

# Continuous
make scan-events-watch
```

## Command-Line Options

```
usage: pubsub-scanner [-h] --agents-dir AGENTS_DIR [--events-dir EVENTS_DIR]
                      [--api-url API_URL] [--interval INTERVAL] [--one-shot]
                      [--version]

Event Flow Scanner - Scan codebase and push graphs to API

options:
  -h, --help            show this help message and exit
  --agents-dir AGENTS_DIR
                        Path to agents directory (required)
  --events-dir EVENTS_DIR
                        Path to events directory (optional, for namespace info)
  --api-url API_URL     Base URL of event_flow API (default: http://localhost:5555)
  --interval INTERVAL   Scan interval in seconds (omit for one-shot mode)
  --one-shot            Run once and exit (overrides --interval)
  --version             show program's version number and exit
```

## Programmatic Usage

You can also use the scanner programmatically in your Python code:

```python
from pathlib import Path
from python_pubsub_scanner import EventFlowScanner

# Create scanner
scanner = EventFlowScanner(
    agents_dir=Path("./agents"),
    events_dir=Path("./events"),
    api_url="http://localhost:5555"
)

# One-shot scan
results = scanner.scan_once()
print(f"Results: {results}")

# Continuous scan
scanner_continuous = EventFlowScanner(
    agents_dir=Path("./agents"),
    api_url="http://localhost:5555",
    interval=60  # seconds
)
scanner_continuous.run_continuous()  # Runs until interrupted
```

## CI/CD Integration

### GitHub Actions

```yaml
name: Update Event Flow

on:
  push:
    branches: [ main ]
    paths:
      - 'agents/**'
      - 'events/**'

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install scanner
        run: pip install python_pubsub_scanner

      - name: Scan event flow
        run: |
          pubsub-scanner \
            --agents-dir ./agents \
            --events-dir ./events \
            --api-url https://event-flow.mycompany.com \
            --one-shot
```

### GitLab CI

```yaml
scan-events:
  stage: build
  image: python:3.10
  script:
    - pip install python_pubsub_scanner
    - pubsub-scanner --agents-dir ./agents --events-dir ./events --one-shot
  only:
    changes:
      - agents/**
      - events/**
```

## Development

### Setup development environment

```bash
# Clone repository
git clone https://github.com/venantvr-trading/Python.PubSub.Scanner
cd Python.PubSub.Scanner

# Create virtual environment
python3 -m venv .venv
source .venv/bin/activate

# Install in editable mode with dev dependencies
pip install -e ".[dev]"
```

### Run quality checks

```bash
# Format code
make format

# Lint code
make lint

# Run all checks
make check
```

### Project structure

```
Python.PubSub.Scanner/
├── src/
│   └── python_pubsub_scanner/
│       ├── __init__.py          # Public API
│       ├── scanner.py           # Core scanner logic
│       └── cli.py               # Command-line interface
├── pyproject.toml               # Package configuration
├── Makefile                     # Development tasks
├── README.md                    # This file
└── .gitignore                   # Git ignore rules
```

## Dependencies

- **requests** >= 2.28.0 - HTTP client for API calls

All event flow analysis logic is embedded directly in this package with **zero external dependencies** (except requests for HTTP).

## License

MIT License - See LICENSE file for details

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Links

- **Documentation**: https://github.com/venantvr-trading/Python.PubSub.Scanner/wiki
- **Issues**: https://github.com/venantvr-trading/Python.PubSub.Scanner/issues
- **Related Projects**:
    - [Python.PubSub.DevTools](https://github.com/venantvr-trading/Python.PubSub.DevTools) - Event flow visualization API
